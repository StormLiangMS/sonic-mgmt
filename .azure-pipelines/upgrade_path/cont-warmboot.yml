trigger: none
pr: none

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

parameters:
- name: TESTBED_NAME
  type: string
  default: vms20-t0-7060
  displayName: "Testbed Name"

- name: INVENTORY_NAME
  type: string
  default: str
  values:
  - str
  - str2
  displayName: "Inventory name"

- name: IMAGE_LOCATION
  displayName: "Image location"
  type: string

- name: IMAGE_LIST
  displayName: "Image list (space separated)"
  type: string

- name: iterations
  type: object
  default: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]

stages:
- stage: Test
  pool: nightly2
  container: sonicdev-microsoft.azurecr.io/docker-sonic-mgmt:sudo
  variables:
  - name: continue
    value: true
  - group: SONIC_IMAGE_URLS
  - group: SAITHRIFT_URLS

  jobs:
  - job: ContinuousWarmbootTest
    displayName: "ContinuousWarmbootTest"
    timeoutInMinutes: 0
    steps:
    - task: AzureKeyVault@1
      displayName: Get Secrets
      inputs:
        azureSubscription: 'Network Production Environment -- SONiC(9355ef17-3aa2-493a-94ab-a43a9bf8cd70)'
        KeyVaultName: 'SONiC'
        SecretsFilter: '*'
        RunAsPreJob: false

    - task: Bash@3
      displayName: Save Secrets
      inputs:
        targetType: 'inline'
        script: |
          # Download secrets.json from Azure Key Vault
          # The AzureKeyVault task automatically set variable for each secret found in key vault
          # Secrets available: nm-secrets, ansible-vault-passwd
          echo '$(nm-secrets)' > ansible/group_vars/all/secrets.json
          echo '$(ansible-vault-passwd)' > ansible/password.txt

          # decrypt the secret file
          md5sum ansible/group_vars/all/secrets.json
          ansible-vault decrypt ansible/group_vars/all/secrets.json --vault-password-file=ansible/password.txt

    - ${{ each iter in parameters.iterations }}:
      - script: |
          set -x
          BASE_PATH=`pwd`
          cd tests
          echo " Continue running test: $(continue)" # outputs secondValue
          if $(continue); then
              pwd
              username=$(id -un)
              rm -rf $(Build.ArtifactStagingDirectory)/*

              CONTINUOUS_REBOOT_COUNT=1
              CONTINUOUS_REBOOT_DELAY=600
              EXTRA_PARAMS="--showlocals --assert plain -rav --skip_sanity --image_location=${{ parameters.IMAGE_LOCATION }} --image_list=${{ parameters.IMAGE_LIST }} --continuous_reboot_delay=$CONTINUOUS_REBOOT_DELAY --continuous_reboot_count=$CONTINUOUS_REBOOT_COUNT"

              iteration=${{ iter }}
              echo "================ iteration ${iteration} started==================="
              echo $iteration
              rm -rf logs/continuous_warm_reboot || true
              ./run_tests.sh -n ${{ parameters.TESTBED_NAME }} \
                -i $BASE_PATH/ansible/${{ parameters.INVENTORY_NAME }},$BASE_PATH/ansible/veos \
                -m individual \
                -l INFO \
                -e "$EXTRA_PARAMS" \
                -u \
                -c "platform_tests/test_cont_warm_reboot.py"

              if [ "${PIPESTATUS[0]}" -ne "0" ]; then
                  # fail and stop all the remaining batches if pytest fails
                  echo "##vso[task.setvariable variable=continue]false"
              fi
              mkdir -p logs/continuous_warm_reboot/ ; mv continous_reboot_* logs/continuous_warm_reboot/ || true

              cp -r logs $(Build.ArtifactStagingDirectory)/
              sudo chown -R $username.$username $(Build.ArtifactStagingDirectory)
              echo "================ iteration ${iteration} completed==================="
          else
              echo "Test execution failure caused skipping of remaining tests"
              exit 2
          fi
        displayName: "Run continuous warmboot tests"
        continueOnError: false
      - publish: $(Build.ArtifactStagingDirectory)/logs
        artifact: continuous-warmboot.log@${{ iter }}
        displayName: "Archive warmboot iteration logs"
        continueOnError: true
